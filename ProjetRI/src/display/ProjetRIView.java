/*
 * ProjetRIView.java
 */
package display;

import index.Index;
import java.awt.Component;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import parsers.ArticlesDirectoryTextParser;
import parsers.ArticlesDirectoryXMLParser;
import parsers.ArticlesDirectoryParser;
import scores.Bm25Articles;
import scores.Bm25Elements;
import scores.Bm25FElements;
import scores.LtcSmartArticles;
import scores.LtnSmartArticles;
import scores.LtnSmartElements;
import scores.MJMscore;
import scores.Score;
import scores.ScoreElements;
import serialization.IndexDeserialization;
import serialization.IndexSerialization;

/**
 * The application's main frame.
 */
public class ProjetRIView extends FrameView {

    public ProjetRIView(SingleFrameApplication app) {
        super(app);

        // init
        initComponents();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ProjetRIApp.getApplication().getMainFrame();
            aboutBox = new ProjetRIAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ProjetRIApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        indexationPane = new javax.swing.JPanel();
        showIndexBrut = new javax.swing.JButton();
        creationPane = new javax.swing.JPanel();
        directoryChoose = new javax.swing.JButton();
        startExtract = new javax.swing.JButton();
        jProgressBarFile = new javax.swing.JProgressBar();
        jProgressBarGlobal = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        recuperationPane = new javax.swing.JPanel();
        indexFileChoose = new javax.swing.JButton();
        jpBarIndexFile = new javax.swing.JProgressBar();
        jSeparator2 = new javax.swing.JSeparator();
        searchPane = new javax.swing.JPanel();
        showIndexWord = new javax.swing.JButton();
        searchTabbedPane = new javax.swing.JTabbedPane();
        bm25 = new javax.swing.JPanel();
        k1label = new javax.swing.JLabel();
        bLabel = new javax.swing.JLabel();
        k1TF = new javax.swing.JTextField();
        bTF = new javax.swing.JTextField();
        bm25ArticleRadioButton = new javax.swing.JRadioButton();
        bm25ElementsRadioButton = new javax.swing.JRadioButton();
        bm25PathTextField = new javax.swing.JTextField();
        bm25f = new javax.swing.JPanel();
        k1label1 = new javax.swing.JLabel();
        k1TF1 = new javax.swing.JTextField();
        bLabel1 = new javax.swing.JLabel();
        bTF1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        alphaArticle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        alphaHeader = new javax.swing.JTextField();
        alphaTitle = new javax.swing.JTextField();
        alphaBody = new javax.swing.JTextField();
        alphaSec = new javax.swing.JTextField();
        alphaP = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        precisionTextField = new javax.swing.JTextField();
        ltn = new javax.swing.JPanel();
        ltnArticleRadioButton = new javax.swing.JRadioButton();
        ltnElementsRadioButton = new javax.swing.JRadioButton();
        ltnPathTextField = new javax.swing.JTextField();
        ltc = new javax.swing.JPanel();
        mjm = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        kTextField = new javax.swing.JTextField();
        exportRunButton = new javax.swing.JButton();
        runCreationPB = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        mainTabbedPane.setDoubleBuffered(true);
        mainTabbedPane.setName("mainTabbedPane"); // NOI18N

        indexationPane.setName("indexationPane"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(display.ProjetRIApp.class).getContext().getResourceMap(ProjetRIView.class);
        showIndexBrut.setText(resourceMap.getString("showIndexBrut.text")); // NOI18N
        showIndexBrut.setEnabled(false);
        showIndexBrut.setName("showIndexBrut"); // NOI18N
        showIndexBrut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showIndexBrutActionPerformed(evt);
            }
        });

        creationPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("creationPane.border.border.titleFont"), resourceMap.getColor("creationPane.border.border.titleColor")), resourceMap.getString("creationPane.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, resourceMap.getColor("creationPane.border.titleColor"))); // NOI18N
        creationPane.setName("creationPane"); // NOI18N

        directoryChoose.setText(resourceMap.getString("directoryChoose.text")); // NOI18N
        directoryChoose.setMaximumSize(new java.awt.Dimension(120, 20));
        directoryChoose.setMinimumSize(new java.awt.Dimension(120, 20));
        directoryChoose.setName("directoryChoose"); // NOI18N
        directoryChoose.setPreferredSize(new java.awt.Dimension(120, 20));
        directoryChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryChooseActionPerformed(evt);
            }
        });

        startExtract.setText(resourceMap.getString("startExtract.text")); // NOI18N
        startExtract.setEnabled(false);
        startExtract.setName("startExtract"); // NOI18N
        startExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startExtractActionPerformed(evt);
            }
        });

        jProgressBarFile.setName("jProgressBarFile"); // NOI18N
        jProgressBarFile.setString(resourceMap.getString("jProgressBarFile.string")); // NOI18N
        jProgressBarFile.setStringPainted(true);

        jProgressBarGlobal.setName("jProgressBarGlobal"); // NOI18N
        jProgressBarGlobal.setString(resourceMap.getString("jProgressBarGlobal.string")); // NOI18N
        jProgressBarGlobal.setStringPainted(true);

        jSeparator1.setName("jSeparator1"); // NOI18N

        javax.swing.GroupLayout creationPaneLayout = new javax.swing.GroupLayout(creationPane);
        creationPane.setLayout(creationPaneLayout);
        creationPaneLayout.setHorizontalGroup(
            creationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, creationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(creationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directoryChoose, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(startExtract, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(jProgressBarFile, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(jProgressBarGlobal, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                .addContainerGap())
        );
        creationPaneLayout.setVerticalGroup(
            creationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creationPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(directoryChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startExtract, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        recuperationPane.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("recuperationPane.border.title"))); // NOI18N
        recuperationPane.setName("recuperationPane"); // NOI18N

        indexFileChoose.setText(resourceMap.getString("indexFileChoose.text")); // NOI18N
        indexFileChoose.setName("indexFileChoose"); // NOI18N
        indexFileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexFileChooseActionPerformed(evt);
            }
        });

        jpBarIndexFile.setName("jpBarIndexFile"); // NOI18N
        jpBarIndexFile.setString(resourceMap.getString("jpBarIndexFile.string")); // NOI18N
        jpBarIndexFile.setStringPainted(true);

        jSeparator2.setName("jSeparator2"); // NOI18N

        javax.swing.GroupLayout recuperationPaneLayout = new javax.swing.GroupLayout(recuperationPane);
        recuperationPane.setLayout(recuperationPaneLayout);
        recuperationPaneLayout.setHorizontalGroup(
            recuperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recuperationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recuperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexFileChoose, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(jpBarIndexFile, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                .addContainerGap())
        );
        recuperationPaneLayout.setVerticalGroup(
            recuperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recuperationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexFileChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBarIndexFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout indexationPaneLayout = new javax.swing.GroupLayout(indexationPane);
        indexationPane.setLayout(indexationPaneLayout);
        indexationPaneLayout.setHorizontalGroup(
            indexationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(creationPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(indexationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recuperationPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexationPaneLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(showIndexBrut, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addGap(58, 58, 58))
        );
        indexationPaneLayout.setVerticalGroup(
            indexationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(creationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recuperationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showIndexBrut, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(24, 24, 24))
        );

        creationPane.getAccessibleContext().setAccessibleName(resourceMap.getString("creationPane.AccessibleContext.accessibleName")); // NOI18N

        mainTabbedPane.addTab(resourceMap.getString("indexationPane.TabConstraints.tabTitle"), indexationPane); // NOI18N

        searchPane.setEnabled(false);
        searchPane.setName("searchPane"); // NOI18N

        showIndexWord.setText(resourceMap.getString("showIndexWord.text")); // NOI18N
        showIndexWord.setEnabled(false);
        showIndexWord.setName("showIndexWord"); // NOI18N
        showIndexWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showIndexWordActionPerformed(evt);
            }
        });

        searchTabbedPane.setName("searchTabbedPane"); // NOI18N

        bm25.setName("bm25"); // NOI18N

        k1label.setText(resourceMap.getString("k1label.text")); // NOI18N
        k1label.setName("k1label"); // NOI18N

        bLabel.setText(resourceMap.getString("bLabel.text")); // NOI18N
        bLabel.setName("bLabel"); // NOI18N

        k1TF.setText(resourceMap.getString("k1TF.text")); // NOI18N
        k1TF.setName("k1TF"); // NOI18N

        bTF.setText(resourceMap.getString("bTF.text")); // NOI18N
        bTF.setName("bTF"); // NOI18N

        buttonGroup2.add(bm25ArticleRadioButton);
        bm25ArticleRadioButton.setSelected(true);
        bm25ArticleRadioButton.setText(resourceMap.getString("bm25ArticleRadioButton.text")); // NOI18N
        bm25ArticleRadioButton.setName("bm25ArticleRadioButton"); // NOI18N

        buttonGroup2.add(bm25ElementsRadioButton);
        bm25ElementsRadioButton.setText(resourceMap.getString("bm25ElementsRadioButton.text")); // NOI18N
        bm25ElementsRadioButton.setName("bm25ElementsRadioButton"); // NOI18N

        bm25PathTextField.setText(resourceMap.getString("bm25PathTextField.text")); // NOI18N
        bm25PathTextField.setName("bm25PathTextField"); // NOI18N

        javax.swing.GroupLayout bm25Layout = new javax.swing.GroupLayout(bm25);
        bm25.setLayout(bm25Layout);
        bm25Layout.setHorizontalGroup(
            bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bm25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bm25ArticleRadioButton)
                    .addGroup(bm25Layout.createSequentialGroup()
                        .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bm25ElementsRadioButton)
                            .addGroup(bm25Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bLabel)
                                    .addComponent(k1label))))
                        .addGap(18, 18, 18)
                        .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bm25PathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(bTF, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(k1TF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        bm25Layout.setVerticalGroup(
            bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bm25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(k1TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(k1label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bm25ArticleRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bm25ElementsRadioButton)
                    .addComponent(bm25PathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(252, Short.MAX_VALUE))
        );

        searchTabbedPane.addTab(resourceMap.getString("bm25.TabConstraints.tabTitle"), bm25); // NOI18N

        bm25f.setName("bm25f"); // NOI18N

        k1label1.setText(resourceMap.getString("k1label1.text")); // NOI18N
        k1label1.setName("k1label1"); // NOI18N

        k1TF1.setText(resourceMap.getString("k1TF1.text")); // NOI18N
        k1TF1.setName("k1TF1"); // NOI18N

        bLabel1.setText(resourceMap.getString("bLabel1.text")); // NOI18N
        bLabel1.setName("bLabel1"); // NOI18N

        bTF1.setText(resourceMap.getString("bTF1.text")); // NOI18N
        bTF1.setName("bTF1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        alphaArticle.setText(resourceMap.getString("alphaArticle.text")); // NOI18N
        alphaArticle.setName("alphaArticle"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        alphaHeader.setText(resourceMap.getString("alphaHeader.text")); // NOI18N
        alphaHeader.setName("alphaHeader"); // NOI18N
        alphaHeader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaHeaderActionPerformed(evt);
            }
        });

        alphaTitle.setText(resourceMap.getString("alphaTitle.text")); // NOI18N
        alphaTitle.setName("alphaTitle"); // NOI18N

        alphaBody.setText(resourceMap.getString("alphaBody.text")); // NOI18N
        alphaBody.setName("alphaBody"); // NOI18N

        alphaSec.setText(resourceMap.getString("alphaSec.text")); // NOI18N
        alphaSec.setName("alphaSec"); // NOI18N

        alphaP.setText(resourceMap.getString("alphaP.text")); // NOI18N
        alphaP.setName("alphaP"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        precisionTextField.setText(resourceMap.getString("precisionTextField.text")); // NOI18N
        precisionTextField.setName("precisionTextField"); // NOI18N

        javax.swing.GroupLayout bm25fLayout = new javax.swing.GroupLayout(bm25f);
        bm25f.setLayout(bm25fLayout);
        bm25fLayout.setHorizontalGroup(
            bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bm25fLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                    .addGroup(bm25fLayout.createSequentialGroup()
                        .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bm25fLayout.createSequentialGroup()
                                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bLabel1)
                                    .addComponent(k1label1)
                                    .addComponent(jLabel2))
                                .addGap(21, 21, 21)
                                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(alphaArticle)
                                    .addComponent(bTF1)
                                    .addComponent(k1TF1, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)))
                            .addGroup(bm25fLayout.createSequentialGroup()
                                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(precisionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(alphaP, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(alphaSec, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(alphaBody, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(alphaHeader, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(alphaTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)))))
                        .addGap(368, 368, 368))))
        );
        bm25fLayout.setVerticalGroup(
            bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bm25fLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(k1label1)
                    .addComponent(k1TF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bLabel1)
                    .addComponent(bTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alphaArticle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(alphaHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(alphaTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(alphaBody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(alphaSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(alphaP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(bm25fLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(precisionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        searchTabbedPane.addTab(resourceMap.getString("bm25f.TabConstraints.tabTitle"), bm25f); // NOI18N

        ltn.setName("ltn"); // NOI18N

        buttonGroup1.add(ltnArticleRadioButton);
        ltnArticleRadioButton.setSelected(true);
        ltnArticleRadioButton.setText(resourceMap.getString("ltnArticleRadioButton.text")); // NOI18N
        ltnArticleRadioButton.setName("ltnArticleRadioButton"); // NOI18N

        buttonGroup1.add(ltnElementsRadioButton);
        ltnElementsRadioButton.setText(resourceMap.getString("ltnElementsRadioButton.text")); // NOI18N
        ltnElementsRadioButton.setName("ltnElementsRadioButton"); // NOI18N

        ltnPathTextField.setText(resourceMap.getString("ltnPathTextField.text")); // NOI18N
        ltnPathTextField.setName("ltnPathTextField"); // NOI18N
        ltnPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ltnPathTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ltnLayout = new javax.swing.GroupLayout(ltn);
        ltn.setLayout(ltnLayout);
        ltnLayout.setHorizontalGroup(
            ltnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ltnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ltnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ltnArticleRadioButton)
                    .addGroup(ltnLayout.createSequentialGroup()
                        .addComponent(ltnElementsRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(ltnPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        ltnLayout.setVerticalGroup(
            ltnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ltnLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(ltnArticleRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ltnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ltnElementsRadioButton)
                    .addComponent(ltnPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(299, Short.MAX_VALUE))
        );

        searchTabbedPane.addTab(resourceMap.getString("ltn.TabConstraints.tabTitle"), ltn); // NOI18N

        ltc.setName("ltc"); // NOI18N

        javax.swing.GroupLayout ltcLayout = new javax.swing.GroupLayout(ltc);
        ltc.setLayout(ltcLayout);
        ltcLayout.setHorizontalGroup(
            ltcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );
        ltcLayout.setVerticalGroup(
            ltcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );

        searchTabbedPane.addTab(resourceMap.getString("ltc.TabConstraints.tabTitle"), ltc); // NOI18N

        mjm.setName("mjm"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        kTextField.setText(resourceMap.getString("kTextField.text")); // NOI18N
        kTextField.setName("kTextField"); // NOI18N

        javax.swing.GroupLayout mjmLayout = new javax.swing.GroupLayout(mjm);
        mjm.setLayout(mjmLayout);
        mjmLayout.setHorizontalGroup(
            mjmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mjmLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(316, Short.MAX_VALUE))
        );
        mjmLayout.setVerticalGroup(
            mjmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mjmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mjmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(337, Short.MAX_VALUE))
        );

        searchTabbedPane.addTab(resourceMap.getString("mjm.TabConstraints.tabTitle"), mjm); // NOI18N

        exportRunButton.setText(resourceMap.getString("exportRunButton.text")); // NOI18N
        exportRunButton.setEnabled(false);
        exportRunButton.setName("exportRunButton"); // NOI18N
        exportRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportRunButtonActionPerformed(evt);
            }
        });

        runCreationPB.setName("runCreationPB"); // NOI18N
        runCreationPB.setString(resourceMap.getString("runCreationPB.string")); // NOI18N
        runCreationPB.setStringPainted(true);

        javax.swing.GroupLayout searchPaneLayout = new javax.swing.GroupLayout(searchPane);
        searchPane.setLayout(searchPaneLayout);
        searchPaneLayout.setHorizontalGroup(
            searchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchTabbedPane, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                    .addComponent(showIndexWord, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportRunButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(runCreationPB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
                .addContainerGap(5, Short.MAX_VALUE))
        );
        searchPaneLayout.setVerticalGroup(
            searchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showIndexWord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportRunButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runCreationPB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab(resourceMap.getString("searchPane.TabConstraints.tabTitle"), searchPane); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
        );

        mainTabbedPane.getAccessibleContext().setAccessibleName(resourceMap.getString("jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(
                this.mainPanel,
                APP_NAME + " : MichaelJeremyMickael\n"
                + "Michael BARD <m.bard.pro@gmail.com> \n"
                + "Mickaël LHOSTE <mickael.lhoste@gmail.com>\n"
                + "Jérèmy REYNARD <jeremy.reynard.42@gmail.com>",
                "- About -",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(
                this.mainPanel,
                "Do you really want to close " + APP_NAME + "?",
                "- Close -",
                JOptionPane.YES_NO_OPTION) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void showIndexBrutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIndexBrutActionPerformed
        if (this.indexator != null) {
            JOptionPane.showMessageDialog(
                    this.mainPanel,
                    this.indexator.showResults(),
                    "Stats",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_showIndexBrutActionPerformed

    private void startExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startExtractActionPerformed

        this.showIndexBrut.setEnabled(false);
        this.showIndexWord.setEnabled(false);
        exportRunButton.setEnabled(false);
        this.indexFileChoose.setEnabled(false);

        Thread extractorThread = new Thread() {

            @Override
            public void run() {
                jProgressBarFile.setValue(0);
                directoryChoose.setEnabled(false);
                startExtract.setEnabled(false);

                Path directory = Paths.get(dirPath);
                String[] filesList = directory.toFile().list();

                if (filesList.length > 0) {

                    if (directory.toFile().list()[0].endsWith("xml")) {
                        indexator = new ArticlesDirectoryXMLParser(dirPath);
                    } else {
                        indexator = new ArticlesDirectoryTextParser(dirPath);
                    }

                    index = indexator.parseDirectory(jProgressBarFile, jProgressBarGlobal);

                    IndexSerialization.serialize(indexator.getIndex(), "fileSerialization/indexSerialized.serial", jProgressBarFile, jProgressBarGlobal);

                    showIndexBrut.setEnabled(true);
                    showIndexWord.setEnabled(true);
                    exportRunButton.setEnabled(true);
                    directoryChoose.setEnabled(true);
                    startExtract.setEnabled(true);
                    jProgressBarFile.setValue(100);
                    jProgressBarGlobal.setValue(100);
                    jProgressBarGlobal.setString("Over");
                } else {
                    JOptionPane.showMessageDialog(
                            mainPanel,
                            "There is no file in this directory : " + dirPath + "\n"
                            + "Please choose another one !",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);

                    directoryChoose.setEnabled(true);
                }

            }
        };
        extractorThread.start();
    }//GEN-LAST:event_startExtractActionPerformed

    private void directoryChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryChooseActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setLocale(Locale.ENGLISH);
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        int returnVal = chooser.showOpenDialog(this.mainPanel);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.dirPath = chooser.getSelectedFile().getAbsolutePath();
            this.startExtract.setEnabled(true);
        }
    }//GEN-LAST:event_directoryChooseActionPerformed

    private void showIndexWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIndexWordActionPerformed

        String word = JOptionPane.showInputDialog(
                this.mainPanel,
                "Word : ",
                "Word searcher",
                JOptionPane.QUESTION_MESSAGE);

        if (word != null) {
            if (this.indexator == null) {
                Map<String, ArrayList<String>> map = this.index.getCollectionData().get(word);
                int nbOccurs = 0;

                if (map != null) {
                    for (ArrayList<String> l : map.values()) {
                        nbOccurs += l.size();
                    }
                }

                JOptionPane.showMessageDialog(
                        mainPanel,
                        "Occurences : " + nbOccurs + "\n",
                        "Word : " + word,
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(
                        this.mainPanel,
                        this.indexator.showResults(word),
                        "Word : " + word,
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }//GEN-LAST:event_showIndexWordActionPerformed

private void indexFileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexFileChooseActionPerformed

    JFileChooser chooser = new JFileChooser();
    chooser.setCurrentDirectory(new java.io.File("."));

    chooser.addChoosableFileFilter(new SimpleFilter("Serialized Index", ".serial"));

    int returnVal = chooser.showOpenDialog(this.mainPanel);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        this.indexPath = chooser.getSelectedFile().getAbsolutePath();

        jpBarIndexFile.setString("Deserialization : " + chooser.getSelectedFile().getName());
        jpBarIndexFile.setIndeterminate(true);

        Thread deserializationTh = new Thread() {

            @Override
            public void run() {
                directoryChoose.setEnabled(false);
                index = IndexDeserialization.deserialize(indexPath);

                jpBarIndexFile.setIndeterminate(false);
                jpBarIndexFile.setValue(100);

                showIndexWord.setEnabled(true);
                exportRunButton.setEnabled(true);
                directoryChoose.setEnabled(true);

                JOptionPane.showMessageDialog(mainPanel, "Done !", "Index deserialization", JOptionPane.INFORMATION_MESSAGE);
            }
        };
        deserializationTh.start();
        showIndexBrut.setEnabled(true);
    }
}//GEN-LAST:event_indexFileChooseActionPerformed

    private boolean testRecouvrement(CoupleStringDouble newPath, ArrayList<CoupleStringDouble> pathsList) {

        for (CoupleStringDouble existingPath : pathsList) {
            if (newPath.stringValue.startsWith(existingPath.stringValue)
                    || existingPath.stringValue.startsWith(newPath.stringValue)) { // if (recouvrement)

                // maybe we have to switch value !
                if (existingPath.doubleValue < newPath.doubleValue) {
                    pathsList.remove(existingPath);
                    pathsList.add(newPath);
                }
                return true;
            }
        }
        return false;
    }

    private void exportRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportRunButtonActionPerformed

        Thread runCreationThread = new Thread() {

            @Override
            public void run() {

                String runs = "";
                String paramsList = "";
                Component selectedTab = searchTabbedPane.getSelectedComponent();
                Score score = null;
                ScoreElements scoreElements = null;
                ScoreElements scoreElementsArticles = null;

                Map<String, Double> scores = null;
                Map<String, Map<String, Double>> scoresElements = null;
                Map<String, Map<String, Double>> scoresElementsArticles = null;
                double k1;
                Double b;

                String request = null;
                String id = null;

                String precision = "/article";

                int nbRequests = requestsMap.size();
                int requestNumber = 0;
                String requestStr = null;

                for (Map.Entry<String, String> e : requestsMap.entrySet()) {
                    System.out.println("Query : " + e.getKey());
                    request = e.getValue();
                    id = e.getKey();
                    runCreationPB.setValue((100 * requestNumber) / nbRequests);
                    requestNumber++;

                    if (selectedTab.equals(ltn)) {
                        System.out.print("LTN : ");
                        requestStr = "[LTN] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);
                        if (ltnArticleRadioButton.isSelected()) {
                            System.out.println("Article");
                            score = new LtnSmartArticles(request, index);
                            scores = ((LtnSmartArticles) score).getScores();

                            paramsList += "ltn_articles";
                        } else if (ltnElementsRadioButton.isSelected()) {
                            System.out.println("Elements");
                            precision = ltnPathTextField.getText();
                            scoreElements = new LtnSmartElements(request, index, precision);
                            scoresElements = ((LtnSmartElements) scoreElements).getScores();

                            scoreElementsArticles = new LtnSmartElements(request, index, precision);
                            scoresElementsArticles = ((LtnSmartElements) scoreElementsArticles).getScores();

                            paramsList += "ltn_elements";
                        }
                    } else if (selectedTab.equals(bm25)) {
                        System.out.print("BM25 : ");
                        k1 = Double.parseDouble(k1TF.getText());
                        b = Double.parseDouble(bTF.getText());
                        requestStr = "[BM25] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);
                        if (bm25ArticleRadioButton.isSelected()) {
                            System.out.println("Article");
                            score = new Bm25Articles(request, index, k1, b);
                            scores = ((Bm25Articles) score).getScores();

                            paramsList += "bm25_articles_k" + k1 + "_b" + b;
                        } else if (bm25ElementsRadioButton.isSelected()) {
                            System.out.print("Elements with precision :");
                            precision = bm25PathTextField.getText();
                            System.out.println(precision);
                            scoreElements = new Bm25Elements(request, index, k1, b, precision);
                            scoresElements = ((Bm25Elements) scoreElements).getScores();

                            scoreElementsArticles = new Bm25Elements(request, index, k1, b, precision);
                            scoresElementsArticles = ((Bm25Elements) scoreElementsArticles).getScores();

                            paramsList += "bm25_elements_k" + k1 + "_b" + b;
                        }
                    } else if (selectedTab.equals(ltc)) {
                        System.out.println("LTC");
                        requestStr = "[LTC] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);

                        score = new LtcSmartArticles(request, index);
                        scores = ((LtcSmartArticles) score).getScores();

                        paramsList += "ltc_articles";
                    } else if (selectedTab.equals(mjm)) {
                        System.out.println("MJM");
                        requestStr = "[MJM] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);

                        score = new MJMscore(request, index, Double.parseDouble(kTextField.getText()));
                        scores = ((MJMscore) score).getScores();

                        paramsList += "mjmperso_articles_k" + kTextField.getText();
                    } else if (selectedTab.equals(bm25f)) {
                        System.out.println("BM25FElements");
                        requestStr = "[BM25F] ";
                        ArrayList<Double> alphas = new ArrayList<>();
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);

                        precision = precisionTextField.getText();
                        k1 = Double.parseDouble(k1TF.getText());
                        b = Double.parseDouble(bTF.getText());
                        alphas.add(Double.parseDouble(alphaArticle.getText()));
                        alphas.add(Double.parseDouble(alphaHeader.getText()));
                        alphas.add(Double.parseDouble(alphaTitle.getText()));
                        alphas.add(Double.parseDouble(alphaBody.getText()));
                        alphas.add(Double.parseDouble(alphaSec.getText()));
                        alphas.add(Double.parseDouble(alphaP.getText()));

                        scoreElements = new Bm25FElements(request, index, k1, b, precision, alphas);
                        scoresElements = ((Bm25FElements) scoreElements).getScores();

                        paramsList += "bm25f_articles_k" + k1 + "_b" + b + "_alpha" + alphaTitle;
                        
                        scoreElementsArticles = new Bm25FElements(request, index, k1, b, precision, alphas);
                        scoresElementsArticles = ((Bm25FElements) scoreElementsArticles).getScores();
                    }

                    double maxValue;
                    String docNumber = "";
                    String path = "";
                    String next;
                    String nextPath;

                    String separator = " ";

                    System.out.println("Begin of ordering scoring...");

                    if (selectedTab.equals(mjm)
                            || selectedTab.equals(ltc)
                            || (selectedTab.equals(ltn) && ltnArticleRadioButton.isSelected())
                            || (selectedTab.equals(bm25) && bm25ArticleRadioButton.isSelected())) {
                        for (int runIndice = 1; runIndice <= 1500; runIndice++) {
                            maxValue = Double.MIN_VALUE;
                            for (Iterator j = scores.keySet().iterator(); j.hasNext();) {
                                next = (String) j.next();
                                if (scores.get(next) > maxValue) {
                                    docNumber = next;
                                    maxValue = scores.get(next);
                                }
                            }
                            scores.remove(docNumber);

                            runs += id + separator
                                    + "Q0" + separator
                                    + docNumber + separator
                                    + runIndice + separator
                                    + (1500 - runIndice + 1) + separator
                                    + "MichaelJeremyMickael" + separator
                                    + "/article[1]" + "\n";
                        }
                    } else {
                        // ----- ELEMENTS

                        // first, order by /article
                        ArrayList<CoupleStringDouble> listArticles = new ArrayList<>(1500);
                        for (int runIndice = 1; runIndice <= 1500; ++runIndice) {
                            maxValue = Double.MIN_VALUE;
                            for (Iterator j = scoresElementsArticles.keySet().iterator(); j.hasNext();) {
                                next = j.next().toString();
                                for (Iterator k = scoresElementsArticles.get(next).keySet().iterator(); k.hasNext();) {
                                    nextPath = k.next().toString();
                                    if ((scoresElementsArticles.get(next).get(nextPath) > maxValue)
                                            && (nextPath.equals("/article[1]"))) {
                                        docNumber = next;
                                        maxValue = scoresElementsArticles.get(next).get(nextPath);
                                        path = nextPath;
                                    }
                                }
                            }
                            listArticles.add(new CoupleStringDouble(docNumber, maxValue));
                            scoresElementsArticles.remove(docNumber);
                        }

                        Map<String, Double> mapScore = null;
                        CoupleStringDouble couple = null;
                        boolean add = false;
                        ArrayList<CoupleStringDouble> listPathsCurrentID = null;
                        CoupleStringDouble newCouple = null;

                        for (int runIndice = 1; runIndice <= 1500;) {
                            add = false;

                            listPathsCurrentID = new ArrayList<>();
                            couple = listArticles.get(runIndice - 1);

                            mapScore = scoresElements.get(couple.stringValue);

                            for (Map.Entry<String, Double> m : mapScore.entrySet()) {
                                newCouple = new CoupleStringDouble(m.getKey(), m.getValue());
                                if (m.getValue() > couple.doubleValue
                                        && !testRecouvrement(newCouple, listPathsCurrentID)) { // TODO TEST RECOUVREMENT
                                    listPathsCurrentID.add(newCouple);
                                    add = true;
                                }
                            }

                            int iplist = 0;
                            while (iplist < listPathsCurrentID.size()) {
                                runs += id + separator
                                        + "Q0" + separator
                                        + couple.stringValue + separator
                                        + runIndice + separator
                                        + (1500 - runIndice + 1) + separator
                                        + "MichaelJeremyMickael" + separator
                                        + (listPathsCurrentID.get(iplist)).stringValue + "\n";
                                iplist++;
                                runIndice++;
                            }

                            if (!add) {
                                runs += id + separator
                                        + "Q0" + separator
                                        + couple.stringValue + separator
                                        + runIndice + separator
                                        + (1500 - runIndice + 1) + separator
                                        + "MichaelJeremyMickael" + separator
                                        + "/article[1]" + "\n";

                                add = false;
                                runIndice++;
                            }
                        }
                    }
                }
                Path runPath = Paths.get("Runs/" + "MichaelJeremyMickael_00_" + paramsList + ".txt");
                try (BufferedWriter writer = Files.newBufferedWriter(runPath, Charset.forName("UTF8"), StandardOpenOption.CREATE)) {
                    writer.write(runs);
                    writer.close();
                } catch (IOException e) {
                    System.out.println("[Score][createRunFile] " + e);
                }

                JOptionPane.showMessageDialog(mainPanel, "Done !", "Run file creation", JOptionPane.INFORMATION_MESSAGE);

            }
        };
        runCreationThread.start();

    }//GEN-LAST:event_exportRunButtonActionPerformed

    private void ltnPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ltnPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ltnPathTextFieldActionPerformed

    private void alphaHeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaHeaderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alphaHeaderActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alphaArticle;
    private javax.swing.JTextField alphaBody;
    private javax.swing.JTextField alphaHeader;
    private javax.swing.JTextField alphaP;
    private javax.swing.JTextField alphaSec;
    private javax.swing.JTextField alphaTitle;
    private javax.swing.JLabel bLabel;
    private javax.swing.JLabel bLabel1;
    private javax.swing.JTextField bTF;
    private javax.swing.JTextField bTF1;
    private javax.swing.JPanel bm25;
    private javax.swing.JRadioButton bm25ArticleRadioButton;
    private javax.swing.JRadioButton bm25ElementsRadioButton;
    private javax.swing.JTextField bm25PathTextField;
    private javax.swing.JPanel bm25f;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel creationPane;
    private javax.swing.JButton directoryChoose;
    private javax.swing.JButton exportRunButton;
    private javax.swing.JButton indexFileChoose;
    private javax.swing.JPanel indexationPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JProgressBar jProgressBarFile;
    private javax.swing.JProgressBar jProgressBarGlobal;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JProgressBar jpBarIndexFile;
    private javax.swing.JTextField k1TF;
    private javax.swing.JTextField k1TF1;
    private javax.swing.JLabel k1label;
    private javax.swing.JLabel k1label1;
    private javax.swing.JTextField kTextField;
    private javax.swing.JPanel ltc;
    private javax.swing.JPanel ltn;
    private javax.swing.JRadioButton ltnArticleRadioButton;
    private javax.swing.JRadioButton ltnElementsRadioButton;
    private javax.swing.JTextField ltnPathTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel mjm;
    private javax.swing.JTextField precisionTextField;
    private javax.swing.JPanel recuperationPane;
    private javax.swing.JProgressBar runCreationPB;
    private javax.swing.JPanel searchPane;
    private javax.swing.JTabbedPane searchTabbedPane;
    private javax.swing.JButton showIndexBrut;
    private javax.swing.JButton showIndexWord;
    private javax.swing.JButton startExtract;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
    private String dirPath = "";
    private String indexPath = "";
    private ArticlesDirectoryParser indexator;
    private final String APP_NAME = "Indexator&atravers";
    private Index index = null;
    private final HashMap<String, String> requestsMap =
            new HashMap() {

                {
                    //put("2009011", "olive oil health benefit");
                    put("2009036", "notting hill film actors");
                    put("2009067", "probabilistic models in information retrieval");
                    put("2009073", "web link network analysis");
                    put("2009074", "web ranking scoring algorithm");
                    put("2009078", "supervised machine learning algorithm");
                    put("2009085", "operating system +mutual +exclusion");


                }
            };

    public class CoupleStringDouble {

        public String stringValue;
        public double doubleValue;

        public CoupleStringDouble(String stringValue, double doubleValue) {

            this.stringValue = stringValue;
            this.doubleValue = doubleValue;
        }

        @Override
        public String toString() {

            return "(" + this.stringValue + ", " + this.doubleValue + ")";
        }
    }
}