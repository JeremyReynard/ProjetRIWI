/*
 * ProjetRIView.java
 */
package display;

import index.Index;
import java.awt.Component;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import parsers.ArticlesDirectoryTextParser;
import parsers.ArticlesDirectoryXMLParser;
import parsers.ArticlesDirectoryParser;
import parsers.Stemmer;
import scores.Bm25Articles;
import scores.LtcSmartArticles;
import scores.LtnSmartArticles;
import scores.MJMscore;
import scores.Score;
import serialization.IndexDeserialization;
import serialization.IndexSerialization;

/**
 * The application's main frame.
 */
public class ProjetRIView extends FrameView {

    public ProjetRIView(SingleFrameApplication app) {
        super(app);

        // init
        initComponents();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = ProjetRIApp.getApplication().getMainFrame();
            aboutBox = new ProjetRIAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        ProjetRIApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        indexationPane = new javax.swing.JPanel();
        showIndexBrut = new javax.swing.JButton();
        creationPane = new javax.swing.JPanel();
        directoryChoose = new javax.swing.JButton();
        startExtract = new javax.swing.JButton();
        jProgressBarFile = new javax.swing.JProgressBar();
        jProgressBarGlobal = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        recuperationPane = new javax.swing.JPanel();
        indexFileChoose = new javax.swing.JButton();
        jpBarIndexFile = new javax.swing.JProgressBar();
        jSeparator2 = new javax.swing.JSeparator();
        searchPane = new javax.swing.JPanel();
        showIndexWord = new javax.swing.JButton();
        searchTabbedPane = new javax.swing.JTabbedPane();
        bm25 = new javax.swing.JPanel();
        k1label = new javax.swing.JLabel();
        bLabel = new javax.swing.JLabel();
        k1TF = new javax.swing.JTextField();
        bTF = new javax.swing.JTextField();
        ltn = new javax.swing.JPanel();
        ltc = new javax.swing.JPanel();
        mjm = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        kTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        exportRunButton = new javax.swing.JButton();
        runCreationPB = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        mainTabbedPane.setDoubleBuffered(true);
        mainTabbedPane.setName("mainTabbedPane"); // NOI18N

        indexationPane.setName("indexationPane"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(display.ProjetRIApp.class).getContext().getResourceMap(ProjetRIView.class);
        showIndexBrut.setText(resourceMap.getString("showIndexBrut.text")); // NOI18N
        showIndexBrut.setEnabled(false);
        showIndexBrut.setName("showIndexBrut"); // NOI18N
        showIndexBrut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showIndexBrutActionPerformed(evt);
            }
        });

        creationPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("creationPane.border.border.titleFont"), resourceMap.getColor("creationPane.border.border.titleColor")), resourceMap.getString("creationPane.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, resourceMap.getColor("creationPane.border.titleColor"))); // NOI18N
        creationPane.setName("creationPane"); // NOI18N

        directoryChoose.setText(resourceMap.getString("directoryChoose.text")); // NOI18N
        directoryChoose.setMaximumSize(new java.awt.Dimension(120, 20));
        directoryChoose.setMinimumSize(new java.awt.Dimension(120, 20));
        directoryChoose.setName("directoryChoose"); // NOI18N
        directoryChoose.setPreferredSize(new java.awt.Dimension(120, 20));
        directoryChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryChooseActionPerformed(evt);
            }
        });

        startExtract.setText(resourceMap.getString("startExtract.text")); // NOI18N
        startExtract.setEnabled(false);
        startExtract.setName("startExtract"); // NOI18N
        startExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startExtractActionPerformed(evt);
            }
        });

        jProgressBarFile.setName("jProgressBarFile"); // NOI18N
        jProgressBarFile.setString(resourceMap.getString("jProgressBarFile.string")); // NOI18N
        jProgressBarFile.setStringPainted(true);

        jProgressBarGlobal.setName("jProgressBarGlobal"); // NOI18N
        jProgressBarGlobal.setString(resourceMap.getString("jProgressBarGlobal.string")); // NOI18N
        jProgressBarGlobal.setStringPainted(true);

        jSeparator1.setName("jSeparator1"); // NOI18N

        javax.swing.GroupLayout creationPaneLayout = new javax.swing.GroupLayout(creationPane);
        creationPane.setLayout(creationPaneLayout);
        creationPaneLayout.setHorizontalGroup(
            creationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, creationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(creationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directoryChoose, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(startExtract, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jProgressBarFile, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jProgressBarGlobal, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                .addContainerGap())
        );
        creationPaneLayout.setVerticalGroup(
            creationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creationPaneLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(directoryChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startExtract, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        recuperationPane.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("recuperationPane.border.title"))); // NOI18N
        recuperationPane.setName("recuperationPane"); // NOI18N

        indexFileChoose.setText(resourceMap.getString("indexFileChoose.text")); // NOI18N
        indexFileChoose.setName("indexFileChoose"); // NOI18N
        indexFileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexFileChooseActionPerformed(evt);
            }
        });

        jpBarIndexFile.setName("jpBarIndexFile"); // NOI18N
        jpBarIndexFile.setString(resourceMap.getString("jpBarIndexFile.string")); // NOI18N
        jpBarIndexFile.setStringPainted(true);

        jSeparator2.setName("jSeparator2"); // NOI18N

        javax.swing.GroupLayout recuperationPaneLayout = new javax.swing.GroupLayout(recuperationPane);
        recuperationPane.setLayout(recuperationPaneLayout);
        recuperationPaneLayout.setHorizontalGroup(
            recuperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recuperationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recuperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexFileChoose, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addComponent(jpBarIndexFile, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                .addContainerGap())
        );
        recuperationPaneLayout.setVerticalGroup(
            recuperationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recuperationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexFileChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBarIndexFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout indexationPaneLayout = new javax.swing.GroupLayout(indexationPane);
        indexationPane.setLayout(indexationPaneLayout);
        indexationPaneLayout.setHorizontalGroup(
            indexationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(creationPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(indexationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recuperationPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexationPaneLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(showIndexBrut, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addGap(58, 58, 58))
        );
        indexationPaneLayout.setVerticalGroup(
            indexationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(creationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recuperationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showIndexBrut, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        creationPane.getAccessibleContext().setAccessibleName(resourceMap.getString("creationPane.AccessibleContext.accessibleName")); // NOI18N

        mainTabbedPane.addTab(resourceMap.getString("indexationPane.TabConstraints.tabTitle"), indexationPane); // NOI18N

        searchPane.setEnabled(false);
        searchPane.setName("searchPane"); // NOI18N

        showIndexWord.setText(resourceMap.getString("showIndexWord.text")); // NOI18N
        showIndexWord.setEnabled(false);
        showIndexWord.setName("showIndexWord"); // NOI18N
        showIndexWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showIndexWordActionPerformed(evt);
            }
        });

        searchTabbedPane.setName("searchTabbedPane"); // NOI18N

        bm25.setName("bm25"); // NOI18N

        k1label.setText(resourceMap.getString("k1label.text")); // NOI18N
        k1label.setName("k1label"); // NOI18N

        bLabel.setText(resourceMap.getString("bLabel.text")); // NOI18N
        bLabel.setName("bLabel"); // NOI18N

        k1TF.setText(resourceMap.getString("k1TF.text")); // NOI18N
        k1TF.setName("k1TF"); // NOI18N

        bTF.setText(resourceMap.getString("bTF.text")); // NOI18N
        bTF.setName("bTF"); // NOI18N

        javax.swing.GroupLayout bm25Layout = new javax.swing.GroupLayout(bm25);
        bm25.setLayout(bm25Layout);
        bm25Layout.setHorizontalGroup(
            bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bm25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bm25Layout.createSequentialGroup()
                        .addComponent(k1label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(k1TF, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bm25Layout.createSequentialGroup()
                        .addComponent(bLabel)
                        .addGap(18, 18, 18)
                        .addComponent(bTF)))
                .addContainerGap(399, Short.MAX_VALUE))
        );
        bm25Layout.setVerticalGroup(
            bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bm25Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(k1label)
                    .addComponent(k1TF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bm25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bLabel)
                    .addComponent(bTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(307, Short.MAX_VALUE))
        );

        searchTabbedPane.addTab(resourceMap.getString("bm25.TabConstraints.tabTitle"), bm25); // NOI18N

        ltn.setName("ltn"); // NOI18N

        javax.swing.GroupLayout ltnLayout = new javax.swing.GroupLayout(ltn);
        ltn.setLayout(ltnLayout);
        ltnLayout.setHorizontalGroup(
            ltnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        ltnLayout.setVerticalGroup(
            ltnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        searchTabbedPane.addTab(resourceMap.getString("ltn.TabConstraints.tabTitle"), ltn); // NOI18N

        ltc.setName("ltc"); // NOI18N

        javax.swing.GroupLayout ltcLayout = new javax.swing.GroupLayout(ltc);
        ltc.setLayout(ltcLayout);
        ltcLayout.setHorizontalGroup(
            ltcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        ltcLayout.setVerticalGroup(
            ltcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        searchTabbedPane.addTab(resourceMap.getString("ltc.TabConstraints.tabTitle"), ltc); // NOI18N

        mjm.setName("mjm"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        kTextField.setText(resourceMap.getString("kTextField.text")); // NOI18N
        kTextField.setName("kTextField"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setText(resourceMap.getString("jTextArea1.text")); // NOI18N
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout mjmLayout = new javax.swing.GroupLayout(mjm);
        mjm.setLayout(mjmLayout);
        mjmLayout.setHorizontalGroup(
            mjmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mjmLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );
        mjmLayout.setVerticalGroup(
            mjmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mjmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mjmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mjmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(178, Short.MAX_VALUE))
        );

        searchTabbedPane.addTab(resourceMap.getString("mjm.TabConstraints.tabTitle"), mjm); // NOI18N

        exportRunButton.setText(resourceMap.getString("exportRunButton.text")); // NOI18N
        exportRunButton.setEnabled(false);
        exportRunButton.setName("exportRunButton"); // NOI18N
        exportRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportRunButtonActionPerformed(evt);
            }
        });

        runCreationPB.setName("runCreationPB"); // NOI18N
        runCreationPB.setString(resourceMap.getString("runCreationPB.string")); // NOI18N
        runCreationPB.setStringPainted(true);

        javax.swing.GroupLayout searchPaneLayout = new javax.swing.GroupLayout(searchPane);
        searchPane.setLayout(searchPaneLayout);
        searchPaneLayout.setHorizontalGroup(
            searchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchTabbedPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addComponent(runCreationPB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addComponent(showIndexWord, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addComponent(exportRunButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
                .addContainerGap())
        );
        searchPaneLayout.setVerticalGroup(
            searchPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showIndexWord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportRunButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runCreationPB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab(resourceMap.getString("searchPane.TabConstraints.tabTitle"), searchPane); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );

        mainTabbedPane.getAccessibleContext().setAccessibleName(resourceMap.getString("jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(
                this.mainPanel,
                APP_NAME + " : MichaelJeremyMickael\n"
                + "Michael BARD <m.bard.pro@gmail.com> \n"
                + "Mickaël LHOSTE <mickael.lhoste@gmail.com>\n"
                + "Jérèmy REYNARD <jeremy.reynard.42@gmail.com>",
                "- About -",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(
                this.mainPanel,
                "Do you really want to close " + APP_NAME + "?",
                "- Close -",
                JOptionPane.YES_NO_OPTION) == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void showIndexBrutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIndexBrutActionPerformed
        if (this.indexator != null) {
            JOptionPane.showMessageDialog(
                    this.mainPanel,
                    this.indexator.showResults(),
                    "Stats",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_showIndexBrutActionPerformed

    private void startExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startExtractActionPerformed

        this.showIndexBrut.setEnabled(false);
        this.showIndexWord.setEnabled(false);
        exportRunButton.setEnabled(false);
        this.indexFileChoose.setEnabled(false);

        Thread extractorThread = new Thread() {

            @Override
            public void run() {
                jProgressBarFile.setValue(0);
                directoryChoose.setEnabled(false);
                startExtract.setEnabled(false);

                Path directory = Paths.get(dirPath);
                String[] filesList = directory.toFile().list();

                if (filesList.length > 0) {

                    if (directory.toFile().list()[0].endsWith("xml")) {
                        indexator = new ArticlesDirectoryXMLParser(dirPath);
                    } else {
                        indexator = new ArticlesDirectoryTextParser(dirPath);
                    }

                    index = indexator.parseDirectory(jProgressBarFile, jProgressBarGlobal);

                    IndexSerialization.serialize(indexator.getIndex(), "fileSerialization/indexSerialized.serial", jProgressBarFile, jProgressBarGlobal);

                    showIndexBrut.setEnabled(true);
                    showIndexWord.setEnabled(true);
                    exportRunButton.setEnabled(true);
                    directoryChoose.setEnabled(true);
                    startExtract.setEnabled(true);
                    jProgressBarFile.setValue(100);
                    jProgressBarGlobal.setValue(100);
                    jProgressBarGlobal.setString("Over");
                } else {
                    JOptionPane.showMessageDialog(
                            mainPanel,
                            "There is no file in this directory : " + dirPath + "\n"
                            + "Please choose another one !",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);

                    directoryChoose.setEnabled(true);
                }

            }
        };
        extractorThread.start();
    }//GEN-LAST:event_startExtractActionPerformed

    private void directoryChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryChooseActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setLocale(Locale.ENGLISH);
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        int returnVal = chooser.showOpenDialog(this.mainPanel);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.dirPath = chooser.getSelectedFile().getAbsolutePath();
            this.startExtract.setEnabled(true);
        }
    }//GEN-LAST:event_directoryChooseActionPerformed

    private void showIndexWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showIndexWordActionPerformed

        String word = JOptionPane.showInputDialog(
                this.mainPanel,
                "Word : ",
                "Word searcher",
                JOptionPane.QUESTION_MESSAGE);

        if (word != null) {
            if (this.indexator == null) {
                Map<String, ArrayList<String>> map = this.index.getCollectionData().get(word);
                int nbOccurs = 0;

                if (map != null) {
                    for (ArrayList<String> l : map.values()) {
                        nbOccurs += l.size();
                    }
                }

                JOptionPane.showMessageDialog(
                        mainPanel,
                        "Occurences : " + nbOccurs + "\n",
                        "Word : " + word,
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(
                        this.mainPanel,
                        this.indexator.showResults(word),
                        "Word : " + word,
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }//GEN-LAST:event_showIndexWordActionPerformed

private void indexFileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexFileChooseActionPerformed

    JFileChooser chooser = new JFileChooser();
    chooser.setCurrentDirectory(new java.io.File("."));

    chooser.addChoosableFileFilter(new SimpleFilter("Serialized Index", ".serial"));

    int returnVal = chooser.showOpenDialog(this.mainPanel);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        this.indexPath = chooser.getSelectedFile().getAbsolutePath();

        jpBarIndexFile.setString("Deserialization : " + chooser.getSelectedFile().getName());
        jpBarIndexFile.setIndeterminate(true);

        Thread deserializationTh = new Thread() {

            @Override
            public void run() {
                directoryChoose.setEnabled(false);
                index = IndexDeserialization.deserialize(indexPath);

                jpBarIndexFile.setIndeterminate(false);
                jpBarIndexFile.setValue(100);

                showIndexWord.setEnabled(true);
                exportRunButton.setEnabled(true);
                directoryChoose.setEnabled(true);

                JOptionPane.showMessageDialog(mainPanel, "Done !", "Index deserialization", JOptionPane.INFORMATION_MESSAGE);
            }
        };
        deserializationTh.start();
    }
}//GEN-LAST:event_indexFileChooseActionPerformed

    private void exportRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportRunButtonActionPerformed

        Thread runCreationThread = new Thread() {

            @Override
            public void run() {

                String runs = "";
                Component selectedTab = searchTabbedPane.getSelectedComponent();
                Score score = null;
                Map<String, Double> scores = null;
                int k1;
                Double b;

                String request = null;
                String id = null;

                int nbRequests = requestsMap.size();
                int requestNumber = 0;
                String requestStr = null;

                for (Map.Entry<String, String> e : requestsMap.entrySet()) {
                    request = e.getValue();
                    id = e.getKey();
                    runCreationPB.setValue((100 * requestNumber) / nbRequests);
                    requestNumber++;

                    if (selectedTab.equals(ltn)) {

                        requestStr = "[LTN] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);

                        score = new LtnSmartArticles(Stemmer.lemmeRequest(request), index);
                        scores = ((LtnSmartArticles) score).getScores();
                    } else if (selectedTab.equals(bm25)) {
                        k1 = Integer.parseInt(k1TF.getText());
                        b = Double.parseDouble(bTF.getText());

                        requestStr = "[BM25] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);

                        score = new Bm25Articles(Stemmer.lemmeRequest(request), index, k1, b);
                        scores = ((Bm25Articles) score).getScores();
                    }else if (selectedTab.equals(ltc)) {

                        requestStr = "[LTC] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);

                        score = new LtcSmartArticles(Stemmer.lemmeRequest(request), index);
                        scores = ((LtcSmartArticles) score).getScores();
                    } else if (selectedTab.equals(mjm)){
                        requestStr = "[MJM] ";
                        requestStr += id + " - " + request;
                        runCreationPB.setString(requestStr);  
                        
                        score = new MJMscore(Stemmer.lemmeRequest(request), index,  Integer.parseInt(kTextField.getText()));
                        scores = ((MJMscore) score).getScores();
                    }
                                        
                    double maxValue;
                    String docNumber = "";
                    String next;

                    String separator = " ";

                    for (int runIndice = 1; runIndice <= 1500; runIndice++) {
                        maxValue = Double.MIN_VALUE;
                        for (Iterator j = scores.keySet().iterator(); j.hasNext();) {
                            next = (String) j.next();
                            if (scores.get(next) > maxValue) {
                                docNumber = next;
                                maxValue = scores.get(next);
                            }
                        }
                        scores.remove(docNumber);

                        runs += id + separator
                                + "Q0" + separator
                                + docNumber + separator
                                + runIndice + separator
                                + (1500 - runIndice + 1) + separator
                                + "MichaelJeremyMickael" + separator
                                + "/article[1]" + "\n";
                    }
                }
                Path runPath = Paths.get("Runs/" + "runsMichaelJeremyMickael" + ".txt");
                try (BufferedWriter writer = Files.newBufferedWriter(runPath, Charset.forName("UTF8"), StandardOpenOption.CREATE)) {
                    writer.write(runs);
                    writer.close();
                } catch (IOException e) {
                    System.out.println("[Score][createRunFile] " + e);
                }

                JOptionPane.showMessageDialog(mainPanel, "Done !", "Run file creation", JOptionPane.INFORMATION_MESSAGE);

            }
        };
        runCreationThread.start();

    }//GEN-LAST:event_exportRunButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bLabel;
    private javax.swing.JTextField bTF;
    private javax.swing.JPanel bm25;
    private javax.swing.JPanel creationPane;
    private javax.swing.JButton directoryChoose;
    private javax.swing.JButton exportRunButton;
    private javax.swing.JButton indexFileChoose;
    private javax.swing.JPanel indexationPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBarFile;
    private javax.swing.JProgressBar jProgressBarGlobal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JProgressBar jpBarIndexFile;
    private javax.swing.JTextField k1TF;
    private javax.swing.JLabel k1label;
    private javax.swing.JTextField kTextField;
    private javax.swing.JPanel ltc;
    private javax.swing.JPanel ltn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel mjm;
    private javax.swing.JPanel recuperationPane;
    private javax.swing.JProgressBar runCreationPB;
    private javax.swing.JPanel searchPane;
    private javax.swing.JTabbedPane searchTabbedPane;
    private javax.swing.JButton showIndexBrut;
    private javax.swing.JButton showIndexWord;
    private javax.swing.JButton startExtract;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;   
    private String dirPath = "";
    private String indexPath = "";
    private ArticlesDirectoryParser indexator;
    private final String APP_NAME = "Indexator&atravers";
    private Index index = null;
    private final HashMap<String, String> requestsMap =
            new HashMap() {

                {                   
                    put("2009011", "olive oil health benefit");
                    put("2009036", "notting hill film actors");
                    put("2009067", "probabilistic models in information retrieval");
                    put("2009073", "web link network analysis");
                    put("2009074", "web ranking scoring algorithm");
                    put("2009078", "supervised machine learning algorithm");
                    put("2009085", "operating system +mutual +exclusion");
                }
            };
}